import json
import random
import logging
from vk_api.keyboard import VkKeyboard, VkKeyboardColor
from data_manager import (
    load_player_data, save_player_data, add_click_to_data,
    update_user_name, add_user, auto_adjust_balance,
    add_winning_to_data, add_transfer_to_data, load_games, save_games
)
from games.coinflip import show_games_keyboard, start_coinflip, process_coinflip_choice, coinflip_sessions
from games.mines import (
    start_mines,
    process_mines_field,
    process_mines_option, 
    process_mines_text,
    process_mines_choice,
    mines_sessions,
    handle_mines_move
)
from games.transfers import initiate_transfer, process_transfer_confirmation, process_transfer, transfer_sessions
from config import CONFIG
from utils import format_user_tag

# –°–ª–æ–≤–∞—Ä–∏ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–π –≤–Ω–µ –∏–≥—Ä–æ–≤—ã—Ö —Å–µ—Å—Å–∏–π
awaiting_name_change = {}
awaiting_bet = {}

def is_group_chat(peer_id):
    return peer_id >= 2000000000

def answer_callback(vk, event, text="\u200b"):
    """
    –û—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ callback-–∑–∞–ø—Ä–æ—Å, —á—Ç–æ–±—ã —Å–∫—Ä—ã—Ç—å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏.
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –Ω–µ–≤–∏–¥–∏–º—ã–π —Å–∏–º–≤–æ–ª (zero-width space) –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é.
    """
    try:
        if not text or len(text.strip()) == 0:
            text = "\u200b"
        event_data = json.dumps({"type": "show_snackbar", "text": text})
        event_obj = event.obj
        vk.messages.sendMessageEventAnswer(
            event_id=event_obj.event_id,
            user_id=event_obj.user_id,
            peer_id=event_obj.peer_id,
            event_data=event_data
        )
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–≤–µ—Ç–µ –Ω–∞ callback: {e}")

def get_inline_keyboard(buttons):
    """
    –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã.
    buttons: –°–ø–∏—Å–æ–∫ —Å–ø–∏—Å–∫–æ–≤ –∫–æ—Ä—Ç–µ–∂–µ–π (—Ç–µ–∫—Å—Ç, —Å–ª–æ–≤–∞—Ä—å payload, —Ü–≤–µ—Ç –∫–Ω–æ–ø–∫–∏)
    """
    kb = VkKeyboard(inline=True)
    for row in buttons:
        for text, payload, color in row:
            kb.add_callback_button(text, color=color, payload=payload)
        kb.add_line()
    return kb.get_keyboard()

def handle_message(event, player_data, vk):
    # –ü–æ–ª—É—á–∞–µ–º –∏ –æ—á–∏—â–∞–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
    raw_text = event.obj.message.get('text', '')
    message_text = raw_text.replace("\xa0", " ").replace("\u200b", "").replace("\uFEFF", "").strip()
    user_id = event.obj.message.get('from_id')
    peer_id = event.obj.message.get('peer_id')
    
    # –ï—Å–ª–∏ –∞–∫—Ç–∏–≤–Ω–∞ —Å–µ—Å—Å–∏—è –ø–µ—Ä–µ–≤–æ–¥–∞, –ø–µ—Ä–µ–¥–∞—ë–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–æ–¥—É–ª—é –ø–µ—Ä–µ–≤–æ–¥–æ–≤
    if str(user_id) in transfer_sessions:
        if process_transfer(event, user_id, message_text, player_data, vk):
            return

    # –ò–Ω–∏—Ü–∏–∏—Ä—É–µ–º –ø–µ—Ä–µ–≤–æ–¥, –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å "–ø–µ—Ä–µ–≤–æ–¥" –∏–ª–∏ "send"
    if message_text.lower().startswith(("–ø–µ—Ä–µ–≤–æ–¥", "send")):
        initiate_transfer(user_id, event, vk)
        return

    # –ï—Å–ª–∏ –∞–∫—Ç–∏–≤–Ω–∞ —Å–µ—Å—Å–∏—è –∏–≥—Ä—ã "–ú–∏–Ω—ã", –ø–µ—Ä–µ–¥–∞—ë–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –æ–±—Ä–∞–±–æ—Ç–∫—É
    if str(user_id) in mines_sessions:
        if process_mines_text(user_id, message_text, player_data, vk, peer_id):
            return

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–µ–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–∏—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∏–∫–Ω–µ–π–º, –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω)
    tag = format_user_tag(user_id, player_data.get(str(user_id), {}))
    logging.debug(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {user_id} {tag}: raw='{raw_text}' -> processed='{message_text}' (repr: {repr(message_text)})")
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–º–µ–Ω—ã –∏–º–µ–Ω–∏
    if str(user_id) in awaiting_name_change:
        if message_text.lower() == "–æ—Ç–º–µ–Ω–∞":
            vk.messages.send(
                peer_id=peer_id,
                message=f"{tag}\n–°–º–µ–Ω–∞ –∏–º–µ–Ω–∏ –æ—Ç–º–µ–Ω–µ–Ω–∞.",
                random_id=random.randint(1, 1000)
            )
        else:
            update_user_name(user_id, message_text, player_data)
            tag = format_user_tag(user_id, player_data.get(str(user_id), {}))
            vk.messages.send(
                peer_id=peer_id,
                message=f"{tag}\n–ò–º—è –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ {message_text}.",
                random_id=random.randint(1, 1000)
            )
        del awaiting_name_change[str(user_id)]
        add_click_to_data(user_id, 0, player_data)
        auto_adjust_balance(user_id, player_data)
        return

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Å—É–º–º—ã —Å—Ç–∞–≤–∫–∏ –¥–ª—è –∏–≥—Ä
    if str(user_id) in awaiting_bet:
        try:
            logging.debug(f"–ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —Å—Ç–∞–≤–∫–∏ –¥–ª—è {user_id} {tag}: '{message_text}'")
            amount = int(message_text)
            game_type = awaiting_bet[str(user_id)]
            del awaiting_bet[str(user_id)]
            current_balance = int(player_data.get(str(user_id), {}).get("balance", 0))
            if current_balance < amount:
                vk.messages.send(
                    peer_id=peer_id,
                    message=f"{tag}\n–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è —Å—Ç–∞–≤–∫–∏.",
                    random_id=random.randint(1, 1000)
                )
                return
            if game_type == "coinflip":
                start_coinflip(user_id, amount, player_data, vk, peer_id)
            elif game_type == "mines":
                start_mines(user_id, amount, player_data, vk, peer_id)
            auto_adjust_balance(user_id, player_data)
        except ValueError as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è —Å—Ç–∞–≤–∫–∏ '{message_text}' –¥–ª—è {user_id} {tag}: {e}")
            vk.messages.send(
                peer_id=peer_id,
                message=f"{tag}\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—Ç–∞–≤–∫—É.",
                random_id=random.randint(1, 1000)
            )
        return

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ –≥—Ä—É–ø–ø–æ–≤–æ–≥–æ —á–∞—Ç–∞
    if is_group_chat(peer_id):
        lower_text = message_text.lower()
        if lower_text == "–Ω–∞—á–∞—Ç—å":
            if bot_has_admin_permissions(peer_id, vk):
                start_games_in_chat(vk, peer_id)
            else:
                vk.messages.send(
                    peer_id=peer_id,
                    message=f"{tag}\n–ë–æ—Ç —Ç—Ä–µ–±—É–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—Å–∫–∏–µ –ø—Ä–∞–≤–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —á–∞—Ç–æ–º –∏ –∑–∞–ø—É—Å–∫–∞ –∏–≥—Ä.",
                    random_id=random.randint(1, 1000)
                )
            return
        elif lower_text in ["–∏–≥—Ä—ã", "–±–æ–Ω—É—Å"]:
            return
    else:
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥ –≤ –ª–∏—á–Ω–æ–º —á–∞—Ç–µ
        lower_text = message_text.lower()
        if lower_text in ["–Ω–∞—á–∞—Ç—å", "–º–µ–Ω—é"]:
            start_game(user_id, player_data, vk, peer_id)
        elif lower_text == "–∫–ª–∏–∫–∏":
            farm_clicks(user_id, player_data, vk, peer_id)
        elif lower_text == "–±–∞–ª–∞–Ω—Å":
            show_balance(user_id, player_data, vk, peer_id)
        elif lower_text == "–ø—Ä–æ—Ñ–∏–ª—å":
            show_profile(user_id, player_data, vk, peer_id)
        elif lower_text == "—Ç–æ–ø –±–∞–ª–∞–Ω—Å–æ–≤":
            show_top_balances(user_id, player_data, vk, peer_id)
        elif lower_text == "—Ç–æ–ø –º–∞–π–Ω–µ—Ä–æ–≤":
            show_top_miners(user_id, player_data, vk, peer_id)
        else:
            return
    add_click_to_data(user_id, 0, player_data)

def start_game(user_id, player_data, vk, peer_id):
    if str(user_id) not in player_data:
        add_user(user_id, player_data, vk)  # –ü–µ—Ä–µ–¥–∞–µ–º vk –ø—Ä–∏ –≤—ã–∑–æ–≤–µ add_user
    tag = format_user_tag(user_id, player_data.get(str(user_id), {}))
    if not is_group_chat(peer_id):
        keyboard = VkKeyboard(one_time=False)
        keyboard.add_callback_button("Glitch‚ö°", color=VkKeyboardColor.PRIMARY, payload={"command": "get_glitch"})
        keyboard.add_line()
        keyboard.add_callback_button("–ò–≥—Ä–∞—Ç—åüé∞", color=VkKeyboardColor.PRIMARY, payload={"command": "join_chat", "link": CONFIG["CHAT_LINK"]})
        keyboard.add_line()
        keyboard.add_callback_button("–ü—Ä–æ—Ñ–∏–ª—åüë§", color=VkKeyboardColor.SECONDARY, payload={"command": "–ø—Ä–æ—Ñ–∏–ª—å"})
        keyboard.add_callback_button("–ü–µ—Ä–µ–≤–æ–¥—ã", color=VkKeyboardColor.SECONDARY, payload={"command": "transfer"})
        keyboard.add_line()
        keyboard.add_callback_button("–¢–æ–ø –±–∞–ª–∞–Ω—Å–æ–≤üí∏", color=VkKeyboardColor.POSITIVE, payload={"command": "—Ç–æ–ø –±–∞–ª–∞–Ω—Å–æ–≤"})
        keyboard.add_callback_button("–¢–æ–ø –º–∞–π–Ω–µ—Ä–æ–≤‚õèÔ∏è", color=VkKeyboardColor.POSITIVE, payload={"command": "—Ç–æ–ø –º–∞–π–Ω–µ—Ä–æ–≤"})
        menu_keyboard = keyboard.get_keyboard()
    else:
        menu_keyboard = None
    vk.messages.send(
        peer_id=peer_id,
        message=f"{tag}\n–ü—Ä–∏–≤–µ—Ç! –Ø Glitch ‚Äì –º–∞–π–Ω–∏—Ç—å –∏–ª–∏ –Ω–µ –º–∞–π–Ω–∏—Ç—å? –¢–≤–æ–µ —Ä–µ—à–µ–Ω–∏–µ.",
        keyboard=menu_keyboard,
        random_id=random.randint(1, 1000)
    )
    logging.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å—Ç–∞—Ä—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id} {tag}.")
    auto_adjust_balance(user_id, player_data)

def farm_clicks(user_id, player_data, vk, peer_id):
    if str(user_id) not in player_data:
        return
    earned_glitch = random.randint(5, 17)
    add_click_to_data(user_id, earned_glitch, player_data)
    tag = format_user_tag(user_id, player_data.get(str(user_id), {}))
    logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} {tag} –Ω–∞—à—ë–ª {earned_glitch} Glitch‚ö°. –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {player_data[str(user_id)]['balance']}")
    vk.messages.send(
        peer_id=peer_id,
        message=f"{tag}\n–í—ã –Ω–∞—à–ª–∏ {earned_glitch} Glitch‚ö°! –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {player_data[str(user_id)]['balance']} Glitch‚ö°.",
        random_id=random.randint(1, 1000)
    )
    auto_adjust_balance(user_id, player_data)

def show_balance(user_id, player_data, vk, peer_id):
    tag = format_user_tag(user_id, player_data.get(str(user_id), {}))
    if str(user_id) in player_data:
        balance = player_data[str(user_id)]["balance"]
        vk.messages.send(
            peer_id=peer_id,
            message=f"{tag}\n–í–∞—à –±–∞–ª–∞–Ω—Å: {balance} Glitch‚ö°.",
            random_id=random.randint(1, 1000)
        )
    else:
        vk.messages.send(
            peer_id=peer_id,
            message=f"{tag}\n–í—ã –µ—â—ë –Ω–µ –Ω–∞—á–∞–ª–∏ –∏–≥—Ä—É. –ù–∞–ø–∏—à–∏—Ç–µ '–Ω–∞—á–∞—Ç—å', —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å!",
            random_id=random.randint(1, 1000)
        )
    auto_adjust_balance(user_id, player_data)

def show_profile(user_id, player_data, vk, peer_id):
    tag = format_user_tag(user_id, player_data.get(str(user_id), {}))
    if str(user_id) in player_data:
        profile = (
            f"{tag}\n–ü—Ä–æ—Ñ–∏–ª—å:\n"
            f"–ë–∞–ª–∞–Ω—Å: {player_data[str(user_id)]['balance']} Glitch‚ö°\n"
            f"–ë–∞–ª–∞–Ω—Å –∑–∞ –≤—Å—ë –≤—Ä–µ–º—è: {player_data[str(user_id)]['total_balance']} Glitch‚ö°\n"
            f"–ö–ª–∏–∫–æ–≤: {player_data[str(user_id)]['clicks']}\n"
            f"–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã: {player_data[str(user_id)]['start_date']}\n\n"
            "–¢—ã –º–æ–∂–µ—à—å —Å–º–µ–Ω–∏—Ç—å –Ω–∏–∫–Ω–µ–π–º –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ"
        )
        keyboard = VkKeyboard(inline=True)
        keyboard.add_callback_button("–°–º–µ–Ω–∏—Ç—å –∏–º—è", color=VkKeyboardColor.PRIMARY, payload={"command": "change_name"})
        inline_menu = keyboard.get_keyboard()
        vk.messages.send(
            peer_id=peer_id,
            message=profile,
            keyboard=inline_menu,
            random_id=random.randint(1, 1000)
        )
    else:
        vk.messages.send(
            peer_id=peer_id,
            message=f"{tag}\n–í—ã –µ—â—ë –Ω–µ –Ω–∞—á–∞–ª–∏ –∏–≥—Ä—É. –ù–∞–ø–∏—à–∏—Ç–µ '–Ω–∞—á–∞—Ç—å', —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å!",
            random_id=random.randint(1, 1000)
        )

def show_top_balances(user_id, player_data, vk, peer_id):
    top = sorted(player_data.items(), key=lambda x: x[1].get("balance", 0), reverse=True)[:5]
    message = "–¢–æ–ø 5 –±–∞–ª–∞–Ω—Å–æ–≤:\n"
    for i, (uid, data) in enumerate(top, 1):
        tag_user = format_user_tag(uid, data)
        message += f"{i}. {tag_user}: {data.get('balance', 0)} Glitch‚ö°\n"
    vk.messages.send(
        peer_id=peer_id,
        message=message,
        random_id=random.randint(1, 1000)
    )

def show_top_miners(user_id, player_data, vk, peer_id):
    message = "–¢–æ–ø –º–∞–π–Ω–µ—Ä–æ–≤ –ø–æ–∫–∞ –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω, –Ω–æ —Å–∫–æ—Ä–æ –±—É–¥–µ—Ç!"
    vk.messages.send(
        peer_id=peer_id,
        message=message,
        random_id=random.randint(1, 1000)
    )

def bot_has_admin_permissions(peer_id, vk):
    # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.
    return True

def start_games_in_chat(vk, peer_id):
    keyboard = VkKeyboard(one_time=False)
    keyboard.add_callback_button("–û—Ä–µ–ª-–†–µ—à–∫–∞", color=VkKeyboardColor.PRIMARY, payload={"command": "coinflip"})
    keyboard.add_callback_button("–ú–∏–Ω—ã", color=VkKeyboardColor.PRIMARY, payload={"command": "mines"})
    keyboard.add_callback_button("–ë–∞–ª–∞–Ω—Å", color=VkKeyboardColor.SECONDARY, payload={"command": "–±–∞–ª–∞–Ω—Å"})
    vk.messages.send(
        peer_id=peer_id,
        message="–í—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä—É:",
        keyboard=keyboard.get_keyboard(),
        random_id=random.randint(1, 1000)
    )

def handle_callback(event, player_data, vk):
    user_id = event.obj.user_id
    payload = event.obj.payload
    peer_id = event.obj.peer_id
    command = payload.get("command")
    action = payload.get("action")
    tag = format_user_tag(user_id, player_data.get(str(user_id), {}))
    
    if command == "transfer_confirm":
        # –ü–æ–ª—É—á–∞–µ–º candidate_id –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–µ—Ä–µ–≤–æ–¥–∞ –∏–∑ —Å–µ—Å—Å–∏–∏ –ø–µ—Ä–µ–≤–æ–¥–æ–≤
        candidate = transfer_sessions.get(str(user_id), {}).get("candidate_id")
        process_transfer_confirmation(event, player_data, vk, peer_id, user_id, action)
        answer_callback(vk, event, "–ü–µ—Ä–µ–≤–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω" if action == "confirm" else "–ü–µ—Ä–µ–≤–æ–¥ –æ—Ç–º–µ–Ω—ë–Ω")
    elif command == "get_glitch":
        farm_clicks(user_id, player_data, vk, peer_id)
        answer_callback(vk, event, f"{tag} –í—ã –ø–æ–ª—É—á–∏–ª–∏ Glitch‚ö°!")
    elif command == "–±–∞–ª–∞–Ω—Å":
        show_balance(user_id, player_data, vk, peer_id)
        answer_callback(vk, event, f"{tag} –í–∞—à –±–∞–ª–∞–Ω—Å!")
    elif command == "–ø—Ä–æ—Ñ–∏–ª—å":
        show_profile(user_id, player_data, vk, peer_id)
        answer_callback(vk, event, f"{tag} –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å!")
    elif command == "—Ç–æ–ø –±–∞–ª–∞–Ω—Å–æ–≤":
        show_top_balances(user_id, player_data, vk, peer_id)
        answer_callback(vk, event, f"{tag} –¢–æ–ø –±–∞–ª–∞–Ω—Å–æ–≤!")
    elif command == "—Ç–æ–ø –º–∞–π–Ω–µ—Ä–æ–≤":
        show_top_miners(user_id, player_data, vk, peer_id)
        answer_callback(vk, event, f"{tag} –¢–æ–ø –º–∞–π–Ω–µ—Ä–æ–≤!")
    elif command == "change_name":
        awaiting_name_change[str(user_id)] = True
        vk.messages.send(
            peer_id=peer_id,
            message=f"{tag}\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∏–º—è –∏–ª–∏ '–æ—Ç–º–µ–Ω–∞' –¥–ª—è –æ—Ç–∫–∞–∑–∞.",
            random_id=random.randint(1, 1000)
        )
        answer_callback(vk, event, "–°–º–µ–Ω–∞ –∏–º–µ–Ω–∏")
    elif command == "coinflip":
        awaiting_bet[str(user_id)] = "coinflip"
        vk.messages.send(
            peer_id=peer_id,
            message=f"{tag}\n–í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É —Å—Ç–∞–≤–∫—É –¥–ª—è '–û—Ä–µ–ª-–†–µ—à–∫–∞':",
            random_id=random.randint(1, 1000)
        )
        answer_callback(vk, event, "–°—Ç–∞–≤–∫–∞ –¥–ª—è –û—Ä–µ–ª-–†–µ—à–∫–∞")
    elif command == "coinflip_choice":
        choice = payload.get("choice")
        if choice:
            process_coinflip_choice(user_id, choice, player_data, vk, peer_id)
        answer_callback(vk, event, "–í—ã–±–æ—Ä –ø—Ä–∏–Ω—è—Ç")
    elif command == "mines":
        awaiting_bet[str(user_id)] = "mines"
        vk.messages.send(
            peer_id=peer_id,
            message=f"{tag}\n–í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É —Å—Ç–∞–≤–∫—É –¥–ª—è –∏–≥—Ä—ã '–ú–∏–Ω—ã':",
            random_id=random.randint(1, 1000)
        )
        answer_callback(vk, event, "–°—Ç–∞–≤–∫–∞ –¥–ª—è –ú–∏–Ω—ã")
    elif command == "mines_field":
        size = payload.get("size")
        from games.mines import process_mines_field
        process_mines_field(event, user_id, size, player_data, vk, peer_id)
    elif command == "mines_option":
        option = payload.get("option")
        from games.mines import process_mines_option
        process_mines_option(event, user_id, option, player_data, vk, peer_id)
    elif command == "mines_move":
        from games.mines import handle_mines_move
        handle_mines_move(event, user_id, player_data, vk, peer_id)
    elif command == "join_chat":
        link = payload.get("link", CONFIG.get("CHAT_LINK", ""))
        vk.messages.send(
            peer_id=peer_id,
            message=f"–ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Ç–µ—Å—å –∫ –∏–≥—Ä–æ–≤–æ–º—É —á–∞—Ç—É –ø–æ —Å—Å—ã–ª–∫–µ:\n{link}",
            random_id=random.randint(1, 1000)
        )
        answer_callback(vk, event, "–ß–∞—Ç –æ—Ç–∫—Ä—ã—Ç")
    elif command == "transfer":
        initiate_transfer(user_id, event, vk)
        answer_callback(vk, event, "–ü–µ—Ä–µ–≤–æ–¥ –∑–∞–ø—É—â–µ–Ω")